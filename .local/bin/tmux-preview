#!/usr/bin/env bash
# Preview script showing enhanced tree structure for a tmux session
visual_length() {
  local text="$1"
  local expanded_text
  local clean_text

  # First expand the escape sequences, then remove them
  expanded_text=$(echo -e "$text")
  # Remove all ANSI escape sequences (more comprehensive pattern)
  clean_text=$(echo -n "$expanded_text" | sed -E 's/\x1b\[[0-9;]*[a-zA-Z]//g')
  echo ${#clean_text}
}

get_available_width() {
  # Try to get terminal width, fallback to reasonable default
  local term_width
  if command -v tput >/dev/null 2>&1; then
    term_width=$(tput cols 2>/dev/null)
  elif [[ -n "$COLUMNS" ]]; then
    term_width=$COLUMNS
  else
    term_width=80
  fi

  # For fzf preview, use a bit less than full width to account for margins
  echo $((term_width))
}

create_box_line_new() {
  local box_start="$1"
  local left_text="$2"
  local right_text="$3"
  local width="$4"
  local fill_char="$5"
  local box_end="$6"
  local text_color="$7"
  local box_border_color="$8"

  local result="$box_border_color$box_start$RESET$text_color$left_text$RESET"
  local visual_len
  visual_len=$(visual_length "$result")
  visual_len_right=$(visual_length "$right_text$box_end")
  local remaining=$((width - visual_len - visual_len_right))

  for ((i = 0; i < remaining; i++)); do
    result+="$box_border_color$fill_char$RESET"
  done
  result+="$text_color$DIM$right_text$RESET$box_border_color$box_end$RESET"
  echo -e "$result"
}

# Clear lines by printing spaces to fill the entire preview width
printf '\033[2J\033[H'

session_name="$1"

if [[ -z "$session_name" ]]; then
  echo "Usage: tmux-preview <session_name>"
  exit 1
fi

# Check if session exists
if ! tmux has-session -t "$session_name" 2>/dev/null; then
  echo "Session '$session_name' not found"
  exit 1
fi

# Get current session to mark it
current_session=$(tmux display-message -p "#{session_name}" 2>/dev/null)

# Color definitions
readonly BLUE='\033[1;34m'
readonly GREEN='\033[1;32m'
readonly YELLOW='\033[1;33m'
readonly CYAN='\033[1;36m'
readonly MAGENTA='\033[1;35m'
readonly RED='\033[1;31m'
readonly GRAY='\033[0;37m'
readonly BOLD='\033[1m'
readonly DIM='\033[2m'
readonly RESET='\033[0m'
# width=60
width=$(get_available_width)

# Get session info
session_info=$(tmux list-sessions -t "$session_name" -F "#{session_windows} windows, #{session_attached} clients" 2>/dev/null)

# Session header with simple box
if [[ "$session_name" == "$current_session" ]]; then
  text_color="$BOLD$MAGENTA"
  border_color="$RED"
else
  text_color="$CYAN"
  border_color="$YELLOW"
fi
create_box_line_new "┌" "" "" "$width" "─" "┐" "$text_color" "$border_color"
create_box_line_new "│" " $session_name " "" "$width" " " "│" "$text_color" "$border_color"
create_box_line_new "└" "" "" "$width" "─" "┘" "$text_color" "$border_color"

echo

# List windows in session
window_count=0
tmux list-windows -t "$session_name" -F "#{window_index}:#{window_name}:#{window_active}:#{window_panes}" 2>/dev/null | while read -r window_info; do
  window_index=$(echo "$window_info" | cut -d: -f1)
  window_name=$(echo "$window_info" | cut -d: -f2)
  window_active=$(echo "$window_info" | cut -d: -f3)
  # window_panes=$(echo "$window_info" | cut -d: -f4)

  ((window_count++))

  # Window header with simple box
  if [[ "$window_active" == "1" ]]; then
    text_color="$BOLD$MAGENTA"
    border_color="$RED"
  else
    text_color="$CYAN"
    border_color="$YELLOW"
  fi
  create_box_line_new "┌" " $window_name " "" "$width" "─" "┐" "$text_color" "$border_color"

  # List panes in window
  pane_count=0
  total_panes=$(tmux list-panes -t "${session_name}:${window_index}" | wc -l)

  tmux list-panes -t "${session_name}:${window_index}" -F "#{pane_index}:#{pane_active}:#{pane_current_command}:#{pane_current_path}" 2>/dev/null | while read -r pane_info; do
    # pane_index=$(echo "$pane_info" | cut -d: -f1)
    pane_active=$(echo "$pane_info" | cut -d: -f2)
    pane_command=$(echo "$pane_info" | cut -d: -f3)
    pane_path=$(echo "$pane_info" | cut -d: -f4)

    ((pane_count++))

    # Determine pane connector
    if [[ $pane_count -eq $total_panes ]]; then
      connector=" └─"
    else
      connector=" ├─"
    fi

    dir_name=$(realpath --relative-to="${HOME}" "${pane_path}")
    if [[ ${#dir_name} -gt 25 ]]; then
      short_path=".../${dir_name: -22}"
    else
      short_path="~/$dir_name"
    fi

    # Combined pane display with program and directory on one line
    text_color="$GRAY"
    # if [[ "$pane_active" == "1" ]]; then
    #   text_color="$GREEN"
    # else
    # fi
    create_box_line_new "│" "$connector $pane_command " "($short_path) " "$width" " " "│" "$text_color" "$border_color"
  done
  create_box_line_new "└" "" "" "$width" "─" "┘" "$GRAY" "$border_color"
done
